#!/usr/bin/env bash

set -e

zookeeper_url=${ZOOKEEPER:-localhost:2181}
retention=86400000
wait_time=60

while getopts ":v:t:z:r:m:w:h" arg; do
  case "$arg" in
    v)
      kafka_version=$OPTARG   # 1.1.0
      ;;
    t)
      topic=$OPTARG           # 'admin'
      ;;
    z)
      zookeeper_url=$OPTARG   # 'http://chs-alphakey-pp.internal.ch'
      ;;
    r)
      retention=$OPTARG
      ;;
    w)
      wait_time=$OPTARG
      ;;
    h)
      echo "$0"
      echo ""
      echo " * Empty kafka topics of messages"
      echo ""
      echo "Options:"
      echo ""
      echo "      OPTION    ARG            DESCRIPTION                                                  DEFAULT (examples)"
      echo "        -v      kafka_version  kafka version you are running, must be set if >1 installed   (0.10.0 or 1.1.0)"
      echo "        -t      topic          kafka topic(s) you want drained (comma-separated list)       (import-observations-extracted)"
      echo "        -z      zookeeper_url  zookeeper url                                                \$ZOOKEEPER or localhost:2181"
      echo "        -r      retention      new retention of topic in millisecs                          $retention"
      echo "        -w      wait           time to wait between changing the retention in secs          $wait_time"
      echo ""
      exit
      ;;
    "?")
      echo "ERROR: Unknown option $OPTARG" >&2
      exit 2
      ;;
  esac
done

banner() {
    echo -e "\n-----------------------------------"
    if [[ -n $1 ]]; then
        echo -e "$@\n"
    fi
}

# Check kafka version is set
if [[ -z $kafka_version ]]; then
    kafka_version=$(ls /usr/local/Cellar/kafka)
    if [[ $kafka_version == " " ]]; then
        kafka_version=
    fi
fi
if [[ -z $kafka_version ]]; then
    echo "Missing kafka version" >&2
    exit 1
fi
kv=$kafka_version
echo "kafka version: $kv"
echo "zookeeper url: $zookeeper_url"
echo "retention (ms): $retention"
echo "wait before reverting (s): $wait_time"

# ensure we use right version binaries
PATH=/usr/local/Cellar/kafka/$kv/bin:$PATH

if [[ -n $topic ]]; then
    topic_list=${topic//,/ }
else
    topic_list=$(kafka-topics --zookeeper $zookeeper_url --list | grep -v '^__')
fi
topics=( $topic_list )
banner "The following $(echo "${topics[@]}" | wc -w) kafka topics will be drained:"
for i in "${topics[@]}"; do
    echo "   $i"
done

banner "STEP 1: Lower retention of kafka topics"
if [[ $kv == 0.* ]]; then
    decrease_retention="kafka-topics --zookeeper $zookeeper_url --alter --config retention.ms=1000 --topic"
    increase_retention="kafka-topics --zookeeper $zookeeper_url --alter --config retention.ms=$retention --topic"
elif [[ $kv == 1.* ]]; then
    decrease_retention="kafka-configs --zookeeper $zookeeper_url --entity-type topics --alter -add-config retention.ms=1000 --entity-name"
    increase_retention="kafka-configs --zookeeper $zookeeper_url --entity-type topics --alter -add-config retention.ms=$retention --entity-name"
fi
count=0
for i in "${topics[@]}"; do
    bleed_topic="$decrease_retention $i"
    let count+=1
    echo -e "$count\t\tbleeding topic: $i"
    echo -e "\t\t$bleed_topic"
    eval $bleed_topic
done

banner "STEP 2: Sleep for $wait_time seconds whilst topics drain"
sleep $wait_time
echo "successfully drained $count topics"

banner "STEP 3: Raise retention of kafka topics to $retention"
count=0
for i in "${topics[@]}"; do
    conf_topic="$increase_retention $i"
    let count+=1
    echo -e "$count\t\t$conf_topic"
    eval $conf_topic
    echo -e "\t\tconfigured retention of topic: $i"
done

banner "Cleared out $count kafka topics"
